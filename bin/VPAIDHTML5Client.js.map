{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/IVPAIDAdUnit.js","js/VPAIDAdUnit.js","js/VPAIDHTML5Client.js","js/subscriber.js","js/utils.js"],"names":[],"mappingstfile":"VPAIDHTML5Client.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar METHODS = [\n    'handshakeVersion',\n    'initAd',\n    'startAd',\n    'stopAd',\n    'skipAd', // VPAID 2.0 new method\n    'resizeAd',\n    'pauseAd',\n    'resumeAd',\n    'expandAd',\n    'collapseAd',\n    'subscribe',\n    'unsubscribe'\n];\n\nvar EVENTS = [\n    'AdLoaded',\n    'AdStarted',\n    'AdStopped',\n    'AdSkipped',\n    'AdSkippableStateChange', // VPAID 2.0 new event\n    'AdSizeChange', // VPAID 2.0 new event\n    'AdLinearChange',\n    'AdDurationChange', // VPAID 2.0 new event\n    'AdExpandedChange',\n    'AdRemainingTimeChange', // [Deprecated in 2.0] but will be still fired for backwards compatibility\n    'AdVolumeChange',\n    'AdImpression',\n    'AdVideoStart',\n    'AdVideoFirstQuartile',\n    'AdVideoMidpoint',\n    'AdVideoThirdQuartile',\n    'AdVideoComplete',\n    'AdClickThru',\n    'AdInteraction', // VPAID 2.0 new event\n    'AdUserAcceptInvitation',\n    'AdUserMinimize',\n    'AdUserClose',\n    'AdPaused',\n    'AdPlaying',\n    'AdLog',\n    'AdError'\n];\n\nvar GETTERS = [\n    'getAdLinear',\n    'getAdWidth', // VPAID 2.0 new getter\n    'getAdHeight', // VPAID 2.0 new getter\n    'getAdExpanded',\n    'getAdSkippableState', // VPAID 2.0 new getter\n    'getAdRemainingTime',\n    'getAdDuration', // VPAID 2.0 new getter\n    'getAdVolume',\n    'getAdCompanions', // VPAID 2.0 new getter\n    'getAdIcons' // VPAID 2.0 new getter\n];\n\nvar SETTERS = [\n    'setAdVolume'\n];\n\n\n/**\n * This callback is displayed as global member. The callback use nodejs error-first callback style\n * @callback NodeStyleCallback\n * @param {string|null}\n * @param {undefined|object}\n */\n\n\n/**\n * IVPAIDAdUnit\n *\n * @class\n *\n * @param {object} creative\n * @param {HTMLElement} el\n * @param {HTMLVideoElement} video\n */\nfunction IVPAIDAdUnit(creative, el, video) {}\n\n\n/**\n * handshakeVersion\n *\n * @param {string} VPAIDVersion\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.handshakeVersion = function (VPAIDVersion, callback) {};\n\n/**\n * initAd\n *\n * @param {number} width\n * @param {number} height\n * @param {string} viewMode can be 'normal', 'thumbnail' or 'fullscreen'\n * @param {number} desiredBitrate indicates the desired bitrate in kbps\n * @param {object} [creativeData] used for additional initialization data\n * @param {object} [environmentVars] used for passing implementation-specific of js version\n * @param {NodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.initAd = function(width, height, viewMode, desiredBitrate, creativeData, environmentVars, callback) {};\n\n/**\n * startAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.startAd = function(callback) {};\n\n/**\n * stopAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.stopAd = function(callback) {};\n\n/**\n * skipAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.skipAd = function(callback) {};\n\n/**\n * resizeAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.resizeAd = function(width, height, viewMode, callback) {};\n\n/**\n * pauseAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.pauseAd = function(callback) {};\n\n/**\n * resumeAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.resumeAd = function(callback) {};\n\n/**\n * expandAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.expandAd = function(callback) {};\n\n/**\n * collapseAd\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.collapseAd = function(callback) {};\n\n/**\n * subscribe\n *\n * @param {string} event\n * @param {nodeStyleCallback} handler\n * @param {object} context\n */\nIVPAIDAdUnit.prototype.subscribe = function(event, handler, context) {};\n\n/**\n * startAd\n *\n * @param {string} event\n * @param {function} handler\n */\nIVPAIDAdUnit.prototype.unsubscribe = function(event, handler) {};\n\n\n\n/**\n * getAdLinear\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdLinear = function(callback) {};\n\n/**\n * getAdWidth\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdWidth = function(callback) {};\n\n/**\n * getAdHeight\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdHeight = function(callback) {};\n\n/**\n * getAdExpanded\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdExpanded = function(callback) {};\n\n/**\n * getAdSkippableState\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdSkippableState = function(callback) {};\n\n/**\n * getAdRemainingTime\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdRemainingTime = function(callback) {};\n\n/**\n * getAdDuration\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdDuration = function(callback) {};\n\n/**\n * getAdVolume\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdVolume = function(callback) {};\n\n/**\n * getAdCompanions\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdCompanions = function(callback) {};\n\n/**\n * getAdIcons\n *\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.getAdIcons = function(callback) {};\n\n/**\n * setAdVolume\n *\n * @param {number} volume\n * @param {nodeStyleCallback} callback\n */\nIVPAIDAdUnit.prototype.setAdVolume = function(volume, callback) {};\n\naddStaticToInterface(IVPAIDAdUnit, 'METHODS', METHODS);\naddStaticToInterface(IVPAIDAdUnit, 'GETTERS', GETTERS);\naddStaticToInterface(IVPAIDAdUnit, 'SETTERS', SETTERS);\naddStaticToInterface(IVPAIDAdUnit, 'EVENTS',  EVENTS);\n\n\nvar VPAID1_METHODS = METHODS.filter(function(method) {\n    return ['skipAd'].indexOf(method) === -1;\n});\n\naddStaticToInterface(IVPAIDAdUnit, 'checkVPAIDInterface', function checkVPAIDInterface (creative) {\n    var result = VPAID1_METHODS.every(function(key) {\n        return typeof creative[key] === 'function';\n    });\n    return result;\n});\n\nmodule.exports = IVPAIDAdUnit;\n\nfunction addStaticToInterface(Interface, name, value) {\n    Object.defineProperty(Interface, name, {\n        writable: false,\n        configurable: false,\n        value: value\n    });\n}\n\n","\"use strict\";\n\nvar IVPAIDAdUnit = require(\"./IVPAIDAdUnit\");\nvar Subscriber = require(\"./subscriber\");\nvar checkVPAIDInterface = IVPAIDAdUnit.checkVPAIDInterface;\nvar utils = require(\"./utils\");\n//var METHODS = IVPAIDAdUnit.METHODS;\nvar ERROR = \"AdError\";\nvar AD_CLICK = \"AdClickThru\";\nvar FILTERED_EVENTS = IVPAIDAdUnit.EVENTS.filter(function(event) {\n  return event !== AD_CLICK;\n});\n\n/**\n * This callback is displayed as global member. The callback use nodejs error-first callback style\n * @callback NodeStyleCallback\n * @param {string|null}\n * @param {undefined|object}\n */\n\n/**\n * VPAIDAdUnit\n * @class\n *\n * @param VPAIDCreative\n * @param {HTMLElement} [el] this will be used in initAd environmentVars.slot if defined\n * @param {HTMLVideoElement} [video] this will be used in initAd environmentVars.videoSlot if defined\n */\nfunction VPAIDAdUnit(VPAIDCreative, el, video, iframe) {\n  this._isValid = checkVPAIDInterface(VPAIDCreative);\n  if (this._isValid) {\n    this._creative = VPAIDCreative;\n    this._el = el;\n    this._videoEl = video;\n    this._iframe = iframe;\n    this._subscribers = new Subscriber();\n    utils.setFullSizeStyle(el);\n    $addEventsSubscribers.call(this);\n  }\n}\n\nVPAIDAdUnit.prototype = Object.create(IVPAIDAdUnit.prototype);\n\n/**\n * isValidVPAIDAd will return if the VPAIDCreative passed in constructor is valid or not\n *\n * @return {boolean}\n */\nVPAIDAdUnit.prototype.isValidVPAIDAd = function isValidVPAIDAd() {\n  return this._isValid;\n};\n\nIVPAIDAdUnit.METHODS.forEach(function(method) {\n  //NOTE: this methods arguments order are implemented differently from the spec\n  var ignores = [\"subscribe\", \"unsubscribe\", \"initAd\"];\n\n  if (ignores.indexOf(method) !== -1) return;\n\n  VPAIDAdUnit.prototype[method] = function() {\n    var ariaty = IVPAIDAdUnit.prototype[method].length;\n    // TODO avoid leaking arguments\n    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n    var args = Array.prototype.slice.call(arguments);\n    var callback = ariaty === args.length ? args.pop() : undefined;\n\n    setTimeout(\n      function() {\n        var result,\n          error = null;\n        try {\n          result = this._creative[method].apply(this._creative, args);\n        } catch (e) {\n          error = e;\n        }\n\n        callOrTriggerEvent(callback, this._subscribers, error, result);\n      }.bind(this),\n      0\n    );\n  };\n});\n\n/**\n * initAd concreate implementation\n *\n * @param {number} width\n * @param {number} height\n * @param {string} viewMode can be 'normal', 'thumbnail' or 'fullscreen'\n * @param {number} desiredBitrate indicates the desired bitrate in kbps\n * @param {object} [creativeData] used for additional initialization data\n * @param {object} [environmentVars] used for passing implementation-specific of js version, if el & video was used in constructor slot & videoSlot will be added to the object\n * @param {NodeStyleCallback} callback\n */\nVPAIDAdUnit.prototype.initAd = function initAd(\n  width,\n  height,\n  viewMode,\n  desiredBitrate,\n  creativeData,\n  environmentVars,\n  callback\n) {\n  creativeData = creativeData || {};\n  environmentVars = utils.extend(\n    {\n      slot: this._el,\n      videoSlot: this._videoEl\n    },\n    environmentVars || {}\n  );\n\n  setTimeout(\n    function() {\n      var error;\n      try {\n        this._creative.initAd(\n          width,\n          height,\n          viewMode,\n          desiredBitrate,\n          creativeData,\n          environmentVars\n        );\n      } catch (e) {\n        error = e;\n      }\n\n      callOrTriggerEvent(callback, this._subscribers, error);\n    }.bind(this),\n    0\n  );\n};\n\n/**\n * subscribe\n *\n * @param {string} event\n * @param {nodeStyleCallback} handler\n * @param {object} context\n */\nVPAIDAdUnit.prototype.subscribe = function subscribe(event, handler, context) {\n  this._subscribers.subscribe(handler, event, context);\n};\n\n/**\n * unsubscribe\n *\n * @param {string} event\n * @param {nodeStyleCallback} handler\n */\nVPAIDAdUnit.prototype.unsubscribe = function unsubscribe(event, handler) {\n  this._subscribers.unsubscribe(handler, event);\n};\n\n//alias\nVPAIDAdUnit.prototype.on = VPAIDAdUnit.prototype.subscribe;\nVPAIDAdUnit.prototype.off = VPAIDAdUnit.prototype.unsubscribe;\n\nIVPAIDAdUnit.GETTERS.forEach(function(getter) {\n  VPAIDAdUnit.prototype[getter] = function(callback) {\n    setTimeout(\n      function() {\n        var result,\n          error = null;\n        try {\n          result = this._creative[getter]();\n        } catch (e) {\n          error = e;\n        }\n\n        callOrTriggerEvent(callback, this._subscribers, error, result);\n      }.bind(this),\n      0\n    );\n  };\n});\n\n/**\n * setAdVolume\n *\n * @param volume\n * @param {nodeStyleCallback} callback\n */\nVPAIDAdUnit.prototype.setAdVolume = function setAdVolume(volume, callback) {\n  setTimeout(\n    function() {\n      var result,\n        error = null;\n      try {\n        this._creative.setAdVolume(volume);\n        result = this._creative.getAdVolume();\n      } catch (e) {\n        error = e;\n      }\n\n      if (!error) {\n        error = utils.validate(\n          result === volume,\n          \"failed to apply volume: \" + volume\n        );\n      }\n      callOrTriggerEvent(callback, this._subscribers, error, result);\n    }.bind(this),\n    0\n  );\n};\n\nVPAIDAdUnit.prototype._destroy = function destroy() {\n  this.stopAd();\n  this._subscribers.unsubscribeAll();\n};\n\nfunction $addEventsSubscribers() {\n  // some ads implement\n  // so they only handle one subscriber\n  // to handle this we create our one\n  FILTERED_EVENTS.forEach(\n    function(event) {\n      this._creative.subscribe($trigger.bind(this, event), event);\n    }.bind(this)\n  );\n\n  // map the click event to be an object instead of depending of the order of the arguments\n  // and to be consistent with the flash\n  this._creative.subscribe($clickThruHook.bind(this), AD_CLICK);\n\n  // because we are adding the element inside the iframe\n  // the user is not able to click in the video\n  if (this._videoEl) {\n    var documentElement = this._iframe.contentDocument.documentElement;\n    var videoEl = this._videoEl;\n    documentElement.addEventListener(\"click\", function(e) {\n      if (e.target === documentElement) {\n        videoEl.click();\n      }\n    });\n  }\n}\n\nfunction $clickThruHook(url, id, playerHandles) {\n  this._subscribers.triggerSync(AD_CLICK, {\n    url: url,\n    id: id,\n    playerHandles: playerHandles\n  });\n}\n\nfunction $trigger(event) {\n  // TODO avoid leaking arguments\n  // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n  this._subscribers.trigger(event, Array.prototype.slice(arguments, 1));\n}\n\nfunction callOrTriggerEvent(callback, subscribers, error, result) {\n  if (callback) {\n    callback(error, result);\n  } else if (error) {\n    subscribers.trigger(ERROR, error);\n  }\n}\n\nmodule.exports = VPAIDAdUnit;\n","'use strict';\n\nvar utils = require('./utils');\nvar unique = utils.unique('vpaidIframe');\nvar VPAIDAdUnit = require('./VPAIDAdUnit');\n\nvar defaultTemplate = '<!DOCTYPE html>' +\n    '<html lang=\"en\">' +\n    '<head><meta charset=\"UTF-8\"></head>' +\n    '<body style=\"margin:0;padding:0\"><div class=\"ad-element\"></div>' +\n    '<script type=\"text/javascript\" src=\"{{iframeURL_JS}}\"></script>' +\n    '<script type=\"text/javascript\">' +\n    'window.parent.postMessage(\\'{\"event\": \"ready\", \"id\": \"{{iframeID}}\"}\\', \\'{{origin}}\\');' +\n    '</script>' +\n    '</body>' +\n    '</html>';\n\nvar AD_STOPPED = 'AdStopped';\n\n\n/**\n * This callback is displayed as global member. The callback use nodejs error-first callback style\n * @callback NodeStyleCallback\n * @param {string|null}\n * @param {undefined|object}\n */\n\n/**\n * VPAIDHTML5Client\n * @class\n *\n * @param {HTMLElement} el that will contain the iframe to load adUnit and a el to add to adUnit slot\n * @param {HTMLVideoElement} video default video element to be used by adUnit\n * @param {object} [templateConfig] template: html template to be used instead of the default, extraOptions: to be used when rendering the template\n * @param {object} [vpaidOptions] timeout: when loading adUnit\n */\n\n\n\n\nfunction VPAIDHTML5Client(el, video, templateConfig, vpaidOptions) {\n    templateConfig = templateConfig || {};\n    this._durlyParmaString = templateConfig;\n    this._id = unique();\n    this._destroyed = false;\n\n    this._frameContainer = utils.createElementInEl(el, 'div');\n    this._videoEl = video;\n    this._vpaidOptions = vpaidOptions || {timeout: 10000};\n\n    this._templateConfig = {\n        template: templateConfig.template || defaultTemplate,\n        extraOptions: templateConfig.extraOptions || {}\n    };\n}\n\n/**\n * destroy\n *\n */\nVPAIDHTML5Client.prototype.destroy = function destroy() {\n    if (this._destroyed) {\n        return;\n    }\n    this._destroyed = true;\n    $unloadPreviousAdUnit.call(this);\n};\n\n/**\n * isDestroyed\n *\n * @return {boolean}\n */\nVPAIDHTML5Client.prototype.isDestroyed = function isDestroyed() {\n    return this._destroyed;\n};\n\n/**\n * loadAdUnit\n *\n * @param {string} adURL url of the js of the adUnit\n * @param {nodeStyleCallback} callback\n */\nVPAIDHTML5Client.prototype.loadAdUnit = function loadAdUnit(adURL, callback) {\n    if(this._onLoad){ return; }\n\n    $throwIfDestroyed.call(this);\n    $unloadPreviousAdUnit.call(this);\n    var that = this;\n\n    var frame = utils.createIframeWithContent(\n        this._frameContainer,\n        this._templateConfig.template,\n        utils.extend({\n            iframeURL_JS: adURL,\n            iframeID: this.getID(),\n            origin: getOrigin()\n        }, this._templateConfig.extraOptions)\n    );\n\n    this._frame = frame;\n\n    this._onLoad = utils.callbackTimeout(\n        this._vpaidOptions.timeout,\n        onLoad.bind(this),\n        onTimeout.bind(this)\n    );\n\n    window.addEventListener('message', this._onLoad);\n\n    function onLoad (e) {\n        /*jshint validthis: false */\n        //don't clear timeout\n        if (e.origin !== getOrigin()) return;\n        var result = JSON.parse(e.data);\n\n        //don't clear timeout\n        if (result.id !== that.getID()) return;\n\n        var adUnit, error, createAd;\n        if (!that._frame.contentWindow) {\n\n            error = 'the iframe is not anymore in the DOM tree';\n\n        } else {\n            createAd = that._frame.contentWindow.getVPAIDAd;\n            error = utils.validate(typeof createAd === 'function', 'the ad didn\\'t return a function to create an ad');\n        }\n\n        if (!error) {\n            var adEl = that._frame.contentWindow.document.querySelector('.ad-element');\n            adUnit = new VPAIDAdUnit(createAd(), adEl, that._videoEl, that._frame);\n            adUnit.subscribe(AD_STOPPED, $adDestroyed.bind(that));\n            error = utils.validate(adUnit.isValidVPAIDAd(), 'the add is not fully complaint with VPAID specification');\n            /**\n             * Handle durly params - mike connor\n             */\n            var durlyParmaString = this._durlyParmaString\n                            .split(\"?\")\n                            .splice(1,1)[0];\n  \n            // inject durly \n            var durlyScript = document.createElement(\"SCRIPT\");\n            durlyScript.setAttribute(\"type\", \"text/javascript\");\n            durlyScript.setAttribute(\"data-name\", \"durly\");\n            if (adEl.clientWidth) {\n                durlyParmaString = durlyParmaString.concat(\n                    \";ad_w=\" + adEl.clientWidth\n                );\n            }\n            if (adEl.clientHeight) {\n                durlyParmaString = durlyParmaString.concat(\n                    \";ad_h=\" + adEl.clientHeight\n                );\n            }\n\n            durlyScript.setAttribute(\n                \"src\",\n                //\"https://staging.betrad.com/durly.js\" +\n                \"https://dev.betrad.com/durly.js?\" + durlyParmaString\n            );\n            that._frame.contentWindow.document.body.appendChild(durlyScript);\n            //end inject durly\n\n        }\n\n        that._adUnit = adUnit;\n        $destroyLoadListener.call(that);\n        callback(error, error ? null : adUnit);\n\n        //clear timeout\n        return true;\n    }\n\n    function onTimeout() {\n        callback('timeout', null);\n    }\n};\n\n/**\n * unloadAdUnit\n *\n */\nVPAIDHTML5Client.prototype.unloadAdUnit = function unloadAdUnit() {\n    $unloadPreviousAdUnit.call(this);\n};\n\n/**\n * getID will return the unique id\n *\n * @return {string}\n */\nVPAIDHTML5Client.prototype.getID = function () {\n    return this._id;\n};\n\n\n/**\n * $removeEl\n *\n * @param {string} key\n */\nfunction $removeEl(key) {\n    var el = this[key];\n    if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n        delete this[key];\n    }\n}\n\nfunction $adDestroyed() {\n    $removeAdElements.call(this);\n    delete this._adUnit;\n}\n\nfunction $unloadPreviousAdUnit() {\n    $removeAdElements.call(this);\n    $destroyAdUnit.call(this);\n}\n\nfunction $removeAdElements() {\n    $removeEl.call(this, '_frame');\n    $destroyLoadListener.call(this);\n}\n\n/**\n * $destroyLoadListener\n *\n */\nfunction $destroyLoadListener() {\n    if (this._onLoad) {\n        window.removeEventListener('message', this._onLoad);\n        delete this._onLoad;\n    }\n}\n\n\nfunction $destroyAdUnit() {\n    if (this._adUnit) {\n        this._adUnit.stopAd();\n        delete this._adUnit;\n    }\n}\n\n/**\n * $throwIfDestroyed\n *\n */\nfunction $throwIfDestroyed() {\n    if (this._destroyed) {\n        throw new Error ('VPAIDHTML5Client already destroyed!');\n    }\n}\n\nfunction getOrigin() {\n    if( window.location.origin ) {\n        return window.location.origin;\n    }\n    else {\n        return window.location.protocol + \"//\" +\n            window.location.hostname +\n            (window.location.port ? ':' + window.location.port: '');\n    }\n}\n\nmodule.exports = VPAIDHTML5Client;\nwindow.VPAIDHTML5Client = VPAIDHTML5Client;\n","'use strict';\n\nfunction Subscriber() {\n    this._subscribers = {};\n}\n\nSubscriber.prototype.subscribe = function subscribe(handler, eventName, context) {\n    if (!this.isHandlerAttached(handler, eventName)) {\n        this.get(eventName).push({handler: handler, context: context, eventName: eventName});\n    }\n};\n\nSubscriber.prototype.unsubscribe = function unsubscribe(handler, eventName) {\n    this._subscribers[eventName] = this.get(eventName).filter(function (subscriber) {\n        return handler !== subscriber.handler;\n    });\n};\n\nSubscriber.prototype.unsubscribeAll = function unsubscribeAll() {\n    this._subscribers = {};\n};\n\nSubscriber.prototype.trigger = function(eventName, data) {\n    var that = this;\n    var subscribers = this.get(eventName)\n        .concat(this.get('*'));\n\n    subscribers.forEach(function (subscriber) {\n        setTimeout(function () {\n            if (that.isHandlerAttached(subscriber.handler, subscriber.eventName)) {\n                subscriber.handler.call(subscriber.context, data);\n            }\n        }, 0);\n    });\n};\n\nSubscriber.prototype.triggerSync = function(eventName, data) {\n    var subscribers = this.get(eventName)\n        .concat(this.get('*'));\n\n    subscribers.forEach(function (subscriber) {\n        subscriber.handler.call(subscriber.context, data);\n    });\n};\n\nSubscriber.prototype.get = function get(eventName) {\n    if (!this._subscribers[eventName]) {\n        this._subscribers[eventName] = [];\n    }\n    return this._subscribers[eventName];\n};\n\nSubscriber.prototype.isHandlerAttached = function isHandlerAttached(handler, eventName) {\n    return this.get(eventName).some(function(subscriber) {\n        return handler === subscriber.handler;\n    })\n};\n\nmodule.exports = Subscriber;\n\n","'use strict';\n\n/**\n * noop a empty function\n */\nfunction noop() {}\n\n/**\n * validate if is not validate will return an Error with the message\n *\n * @param {boolean} isValid\n * @param {string} message\n */\nfunction validate(isValid, message) {\n    return isValid ? null : new Error(message);\n}\n\n/**\n * callbackTimeout if the onSuccess is not called and returns true in the timelimit then onTimeout will be called\n *\n * @param {number} timer\n * @param {function} onSuccess\n * @param {function} onTimeout\n */\nfunction callbackTimeout(timer, onSuccess, onTimeout) {\n    var callback, timeout;\n\n    timeout = setTimeout(function () {\n        onSuccess = noop;\n        onTimeout();\n    }, timer);\n\n    callback = function () {\n        // TODO avoid leaking arguments\n        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n        if (onSuccess.apply(this, arguments)) {\n            clearTimeout(timeout);\n        }\n    };\n\n    return callback;\n}\n\n\n/**\n * createElementInEl\n *\n * @param {HTMLElement} parent\n * @param {string} tagName\n * @param {string} id\n */\nfunction createElementInEl(parent, tagName, id) {\n    var nEl = document.createElement(tagName);\n    if (id) nEl.id = id;\n    parent.appendChild(nEl);\n    return nEl;\n}\n\n/**\n * createIframeWithContent\n *\n * @param {HTMLElement} parent\n * @param {string} template simple template using {{var}}\n * @param {object} data\n */\nfunction createIframeWithContent(parent, template, data) {\n    var iframe = createIframe(parent, null, data.zIndex);\n    if (!setIframeContent(iframe, simpleTemplate(template, data))) return;\n    return iframe;\n}\n\n/**\n * createIframe\n *\n * @param {HTMLElement} parent\n * @param {string} url\n */\nfunction createIframe(parent, url, zIndex) {\n    var nEl = document.createElement('iframe');\n    nEl.src = url || 'about:blank';\n    nEl.marginWidth = '0';\n    nEl.marginHeight = '0';\n    nEl.frameBorder = '0';\n    nEl.width = '100%';\n    nEl.height = '100%';\n    setFullSizeStyle(nEl);\n\n    if(zIndex){\n        nEl.style.zIndex = zIndex;\n    }\n\n    nEl.setAttribute('SCROLLING','NO');\n    parent.innerHTML = '';\n    parent.appendChild(nEl);\n    return nEl;\n}\n\nfunction setFullSizeStyle(element) {\n    if(element) {\n        element.style.position = 'absolute';\n        element.style.left = '0';\n        element.style.top = '0';\n        element.style.margin = '0px';\n        element.style.padding = '0px';\n        element.style.border = 'none';\n        element.style.width = '100%';\n        element.style.height = '100%';\n    }\n}\n\n/**\n * simpleTemplate\n *\n * @param {string} template\n * @param {object} data\n */\nfunction simpleTemplate(template, data) {\n    Object.keys(data).forEach(function (key) {\n        var value = (typeof value === 'object') ? JSON.stringify(data[key]) : data[key];\n        template = template.replace(new RegExp('{{' + key + '}}', 'g'), value);\n    });\n    return template;\n}\n\n/**\n * setIframeContent\n *\n * @param {HTMLIframeElement} iframeEl\n * @param content\n */\nfunction setIframeContent(iframeEl, content) {\n    var iframeDoc = iframeEl.contentWindow && iframeEl.contentWindow.document;\n    if (!iframeDoc) return false;\n\n    iframeDoc.write(content);\n\n    return true;\n}\n\n\n/**\n * extend object with keys from another object\n *\n * @param {object} toExtend\n * @param {object} fromSource\n */\nfunction extend(toExtend, fromSource) {\n    Object.keys(fromSource).forEach(function(key) {\n        toExtend[key] = fromSource[key];\n    });\n    return toExtend;\n}\n\n\n/**\n * unique will create a unique string everytime is called, sequentially and prefixed\n *\n * @param {string} prefix\n */\nfunction unique(prefix) {\n    var count = -1;\n    return function () {\n        return prefix + '_' + (++count);\n    };\n}\n\nmodule.exports = {\n    noop: noop,\n    validate: validate,\n    callbackTimeout: callbackTimeout,\n    createElementInEl: createElementInEl,\n    createIframeWithContent: createIframeWithContent,\n    createIframe: createIframe,\n    setFullSizeStyle: setFullSizeStyle,\n    simpleTemplate: simpleTemplate,\n    setIframeContent: setIframeContent,\n    extend: extend,\n    unique: unique\n};\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}